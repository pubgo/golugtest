// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: example/proto/hello/api.proto

package hello

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_example_proto_hello_api_proto protoreflect.FileDescriptor

var file_example_proto_hello_api_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9d, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69,
	0x12, 0x31, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x3a, 0x01, 0x2a, 0x42, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x32, 0xb7, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69,
	0x56, 0x32, 0x12, 0x50, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x0e,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x31, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x41, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_example_proto_hello_api_proto_goTypes = []interface{}{
	(*TestReq)(nil),       // 0: hello.TestReq
	(*TestApiOutput)(nil), // 1: hello.TestApiOutput
}
var file_example_proto_hello_api_proto_depIdxs = []int32{
	0, // 0: hello.TestApi.Version:input_type -> hello.TestReq
	0, // 1: hello.TestApi.VersionTest:input_type -> hello.TestReq
	0, // 2: hello.TestApiV2.Version1:input_type -> hello.TestReq
	0, // 3: hello.TestApiV2.VersionTest1:input_type -> hello.TestReq
	1, // 4: hello.TestApi.Version:output_type -> hello.TestApiOutput
	1, // 5: hello.TestApi.VersionTest:output_type -> hello.TestApiOutput
	1, // 6: hello.TestApiV2.Version1:output_type -> hello.TestApiOutput
	1, // 7: hello.TestApiV2.VersionTest1:output_type -> hello.TestApiOutput
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_example_proto_hello_api_proto_init() }
func file_example_proto_hello_api_proto_init() {
	if File_example_proto_hello_api_proto != nil {
		return
	}
	file_example_proto_hello_api1_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_proto_hello_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_example_proto_hello_api_proto_goTypes,
		DependencyIndexes: file_example_proto_hello_api_proto_depIdxs,
	}.Build()
	File_example_proto_hello_api_proto = out.File
	file_example_proto_hello_api_proto_rawDesc = nil
	file_example_proto_hello_api_proto_goTypes = nil
	file_example_proto_hello_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestApiClient is the client API for TestApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestApiClient interface {
	Version(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error)
	VersionTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error)
}

type testApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTestApiClient(cc grpc.ClientConnInterface) TestApiClient {
	return &testApiClient{cc}
}

func (c *testApiClient) Version(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error) {
	out := new(TestApiOutput)
	err := c.cc.Invoke(ctx, "/hello.TestApi/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiClient) VersionTest(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error) {
	out := new(TestApiOutput)
	err := c.cc.Invoke(ctx, "/hello.TestApi/VersionTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestApiServer is the server API for TestApi service.
type TestApiServer interface {
	Version(context.Context, *TestReq) (*TestApiOutput, error)
	VersionTest(context.Context, *TestReq) (*TestApiOutput, error)
}

// UnimplementedTestApiServer can be embedded to have forward compatible implementations.
type UnimplementedTestApiServer struct {
}

func (*UnimplementedTestApiServer) Version(context.Context, *TestReq) (*TestApiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedTestApiServer) VersionTest(context.Context, *TestReq) (*TestApiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionTest not implemented")
}

func RegisterTestApiServer(s *grpc.Server, srv TestApiServer) {
	s.RegisterService(&_TestApi_serviceDesc, srv)
}

func _TestApi_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.TestApi/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).Version(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApi_VersionTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).VersionTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.TestApi/VersionTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).VersionTest(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.TestApi",
	HandlerType: (*TestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _TestApi_Version_Handler,
		},
		{
			MethodName: "VersionTest",
			Handler:    _TestApi_VersionTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/proto/hello/api.proto",
}

// TestApiV2Client is the client API for TestApiV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestApiV2Client interface {
	Version1(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error)
	VersionTest1(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error)
}

type testApiV2Client struct {
	cc grpc.ClientConnInterface
}

func NewTestApiV2Client(cc grpc.ClientConnInterface) TestApiV2Client {
	return &testApiV2Client{cc}
}

func (c *testApiV2Client) Version1(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error) {
	out := new(TestApiOutput)
	err := c.cc.Invoke(ctx, "/hello.TestApiV2/Version1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiV2Client) VersionTest1(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestApiOutput, error) {
	out := new(TestApiOutput)
	err := c.cc.Invoke(ctx, "/hello.TestApiV2/VersionTest1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestApiV2Server is the server API for TestApiV2 service.
type TestApiV2Server interface {
	Version1(context.Context, *TestReq) (*TestApiOutput, error)
	VersionTest1(context.Context, *TestReq) (*TestApiOutput, error)
}

// UnimplementedTestApiV2Server can be embedded to have forward compatible implementations.
type UnimplementedTestApiV2Server struct {
}

func (*UnimplementedTestApiV2Server) Version1(context.Context, *TestReq) (*TestApiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version1 not implemented")
}
func (*UnimplementedTestApiV2Server) VersionTest1(context.Context, *TestReq) (*TestApiOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionTest1 not implemented")
}

func RegisterTestApiV2Server(s *grpc.Server, srv TestApiV2Server) {
	s.RegisterService(&_TestApiV2_serviceDesc, srv)
}

func _TestApiV2_Version1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiV2Server).Version1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.TestApiV2/Version1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiV2Server).Version1(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApiV2_VersionTest1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiV2Server).VersionTest1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.TestApiV2/VersionTest1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiV2Server).VersionTest1(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApiV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.TestApiV2",
	HandlerType: (*TestApiV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version1",
			Handler:    _TestApiV2_Version1_Handler,
		},
		{
			MethodName: "VersionTest1",
			Handler:    _TestApiV2_VersionTest1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/proto/hello/api.proto",
}
